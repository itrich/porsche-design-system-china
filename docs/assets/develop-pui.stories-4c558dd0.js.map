{"version":3,"file":"develop-pui.stories-4c558dd0.js","sources":["../../README.md?raw"],"sourcesContent":["export default \"#### 安装所有依赖\\n\\n在项目根目录运行：\\n\\n```\\nnpm run install-all\\n```\\n\\n#### 本地开发\\n\\n首先需要编译 Icon 库\\n\\n```\\nnpm -w @pui-cn/icons run generate\\n或进入 @pui-cn/icons 目录\\nnpm run generate\\n\\nnpm -w @pui-cn/icons run build\\n或进入 @pui-cn/icons 目录\\nnpm run build\\n```\\n\\n再启动 storybook\\n\\n```\\nnpm -w @pui-cn/react run storybook\\n或进入到 @pui-cn/react 目录\\nnpm run storybook\\n```\\n\\n#### 组件结构\\n\\n##### 1、属性声明\\n\\n必须按照格式进行注释，会生成相应的属性文档（注意前面是两个星号 /\\\\*\\\\*）\\n\\n```ts\\nexport type ButtonProps = {\\n  /** 类型 */\\n  type?: ButtonType\\n  /** 图标 */\\n  icon?: React.ReactNode\\n  /** 尺寸 */\\n  size?: SizeType\\n  /** 是否加载 */\\n  loading?: boolean | { delay?: number }\\n  /** 传入参数 */\\n  prefixCls?: string\\n  /** 类名 */\\n  className?: string\\n  /** 传入子组件列表 */\\n  children?: React.ReactNode\\n  /** 样式object */\\n  style?: any\\n}\\n```\\n\\n##### 2、组件实现\\n\\n```ts\\nfunction Button(props: PropsWithChildren<ButtonProps>) {\\n  const { children, className, type = 'default', style } = props\\n\\n  return (\\n    <button\\n      className={cn('pos-button', `pos-button-${type}`, className)}\\n      style={style}\\n    >\\n      {children}\\n    </button>\\n  )\\n}\\n```\\n\\n### 编写 storybook\\n\\n##### Storybook 文档: https://storybook.js.org/\\n\\n```tsx\\nimport { withKnobs, text, boolean, select } from '@storybook/addon-knobs'\\n\\nexport default {\\n  title: 'Button',\\n  component: Button,\\n  decorators: [withKnobs]\\n}\\n\\n// storybook可控组件\\nexport const knobsButton = () => (\\n  <Button\\n    size={select<SizeType>('size', SIZES, 'large')}\\n    type={select<ButtonType>('type', ButtonTypes, 'primary')}\\n  >\\n    {text('123', '123')}\\n  </Button>\\n)\\n\\n// 其他展示组件\\n\\nexport const MyBtn = () => <Button type=\\\"ghost\\\">按钮</Button>\\n```\\n\\n## 代码编写要点\\n\\n#### 不允许安装第三方库\\n\\n组件库是公用的组件多安装一个依赖意味着所有的项目跟着多安装依赖加大体积和复杂度\\n所以原则上不允许再安装第三方库，如果小量需要功能，可以拷贝第三方库的某个函数到 pui 代码里\\n\\n#### 组件命名清晰，属性表意明确\\n\\n组件库是大家公用的，命名要尽可能的准确易懂\\n\\n#### 组件易用简单\\n\\n设计组件要考虑最终使用者的便利性与易用程度，设计组件的目标是开发者一看便知道怎么去使用，而且用最短的代码完成对应工作。\\n\\n#### 不是所用功能都应该归在组件库中\\n\\n组件库提供了共用能力的最小子集，在考虑给组件库添加新组建时候需要考虑清楚，这个功能是你的项目单独需要还是很多项目都共同需要这个问题，不应该随心所欲的给组件库不断添加功能。\\n\\n#### 组件库的设计是否与设计稿一致很重要\\n\\n开发前因跟设计部门沟通好组件的样式修改规则，做好的组件，要经过设计部门的 “走查” 流程，开发者也应该在代码完成时候完成大小改变主题改变的自查。\\n\\n#### Form 开发\\n\\n表单与表单组件的开发是 PUI 的核心，保时捷的业务管理系统，60% ~ 70% 的代码就是在做各种各样的表单，开发新的表单控件，要注意表单控件与 &lt;Form\\\\&gt; 组件的联动性\\n\\n通常来说，一个新的表单组件开发可以分为以下几个步骤\\n\\n1. 创建表单组件文件，使用 FormItem 将其包裹，以此获得 label, name 等通用属性。\\n2. 在组建中加入 value 与 onValueChange 属性\\n3. 调整 Form 的代码 在 149 行左右 327 行左右，将表单加入支持列表，获得联动效果（form 上灌入的 data 属性可以以 name 作为 key 值灌入到表单组件中）\\n\\n#### 多主题支持\\n\\nPUI 的样式支持多主题，在 css 中要写成：\\n\\n```scss\\n@import '../../styles/theme/index';\\n@each $theme in $themes {\\n  .pui-theme-#{$theme} {\\n    @include theme($theme);\\n\\n    // css 内容\\n  }\\n}\\n```\\n\\nPUI 的主题颜色变量等定义放在\\n\\nstyles/theme/dark.scss\\n\\nstyles/theme/light.scss\\n\\n两个文件中，支持主题，可以将变量带入到样式中\\n\\n#### 组件尺寸大小支持，多形态支持\\n\\n尺寸大小支持，组件库提供了一个统一的方法处理\\n\\n```ts\\nconst [defaultSize] = useDefaultSize()\\n\\nreturn (\\n  <div\\n    className={componentClassNames(\\n      'pui-breadcrumb',\\n      { size: size || defaultSize },\\n      className\\n    )}\\n    style={style}\\n  >\\n    // 组件代码\\n  </div>\\n)\\n```\\n\\ncomponentClassNames 的作用是按不同的 size 切换给顶部的 div 设置不同的 size 或者其他属性\\n\\n若 size=\\\"big\\\", 那么顶层的 div class 中就会有一个 pui-breadcrumb-size-big\\n\\n若 size=\\\"medium\\\", 那么顶层的 div class 中就会有一个 pui-breadcrumb-size-medium\\n\\n#### 弹框开发\\n\\n下拉弹框开发中极难的功能，体现在以下几点\\n\\n1. 弹框弹出不能被 支持 overflow: scroll 的 div 截断，那么弹框必须写到 body 层。\\n2. 弹框写到 body 层要在层次上不停的计算正确的位置，上层元素有可能是 scroll 的 div，有可能是 fixed 的 div，要让 body 上的弹框内容与组件元素相对位置一致难度很大。\\n3. 弹框不能偏离出屏幕，如果弹框的底部，右侧，上部，左侧超出了浏览器的范围，弹框因调整位置让其能完整显示在浏览器窗体里。\\n4. 弹框要相互互斥单显，例如一个页面中有多个下拉菜单的控件，点击之后只允许一个出现，不会同时显示 2 个下拉弹框。\\n\\n基于这些开发难点，组件库封装了下拉弹框，写法如下：\\n\\n```ts\\nconst rootElementRef = useRef<any>(null)\\nconst popMenuRef = useRef<any>(null)\\nconst [showOptionList, setShowOptionList, puiPopupWrap] = usePopShowState()\\nconst [menuPos, updatePos] = useElementPos(rootElementRef, popMenuRef)\\n\\n// 组件代码，setShowOptionList(false) 可以在弹框内容中点击了某处确定按钮调用 使其消失\\n// updatePos 可以在某些特定情况，例如页面的某些改变导致组件位置改变，需要强制刷新弹出菜单位置时调用\\n\\n<div ref={rootElementRef}>\\n{showOptionList &&\\n \\tReactDOM.createPortal(\\n \\t\\t\\t<div style={...menuPos} ref={popMenuRef}> 弹框内容 </div>,\\n      puiPopupWrap)\\n}\\n</div>\\n```\\n\\n#### 多重载属性\\n\\npui 的组件属性支持多重载写法，例如 DatePicker 组件 value 可以传入 Date 型，亦可以传入 string 型的 \\\"2022-10-01\\\"，多重载给开发者提供了多样便利，但是也会加大组件库的开发难度，开发组件时可以视情况酌情开发\\n\\n#### 提交代码\\n\\n提交代码，应该建立新分支，完成代码之后找 立超 或 莫哥 检查合并\\n\\n#### 发版\\n\\n由立超与莫哥定期发版\\n\""],"names":["Develop"],"mappings":"uaAAA,MAAe}